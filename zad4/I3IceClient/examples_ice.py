# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `examples.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

_M_Demo._t_UALSIO = IcePy.defineValue('::Demo::UALSIO', Ice.Value, -1, (), False, True, None, ())

if 'UALSIOPrx' not in _M_Demo.__dict__:
    _M_Demo.UALSIOPrx = Ice.createTempClass()
    class UALSIOPrx(Ice.ObjectPrx):

        def addGet(self, context=None):
            return _M_Demo.UALSIO._op_addGet.invoke(self, ((), context))

        def addGetAsync(self, context=None):
            return _M_Demo.UALSIO._op_addGet.invokeAsync(self, ((), context))

        def begin_addGet(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.UALSIO._op_addGet.begin(self, ((), _response, _ex, _sent, context))

        def end_addGet(self, _r):
            return _M_Demo.UALSIO._op_addGet.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.UALSIOPrx.ice_checkedCast(proxy, '::Demo::UALSIO', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.UALSIOPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::UALSIO'
    _M_Demo._t_UALSIOPrx = IcePy.defineProxy('::Demo::UALSIO', UALSIOPrx)

    _M_Demo.UALSIOPrx = UALSIOPrx
    del UALSIOPrx

    _M_Demo.UALSIO = Ice.createTempClass()
    class UALSIO(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::UALSIO', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::UALSIO'

        @staticmethod
        def ice_staticId():
            return '::Demo::UALSIO'

        def addGet(self, current=None):
            raise NotImplementedError("servant method 'addGet' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_UALSIODisp)

        __repr__ = __str__

    _M_Demo._t_UALSIODisp = IcePy.defineClass('::Demo::UALSIO', UALSIO, (), None, ())
    UALSIO._ice_type = _M_Demo._t_UALSIODisp

    UALSIO._op_addGet = IcePy.Operation('addGet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.UALSIO = UALSIO
    del UALSIO

_M_Demo._t_DUALSIO = IcePy.defineValue('::Demo::DUALSIO', Ice.Value, -1, (), False, True, None, ())

if 'DUALSIOPrx' not in _M_Demo.__dict__:
    _M_Demo.DUALSIOPrx = Ice.createTempClass()
    class DUALSIOPrx(Ice.ObjectPrx):

        def subtract(self, a, b, context=None):
            return _M_Demo.DUALSIO._op_subtract.invoke(self, ((a, b), context))

        def subtractAsync(self, a, b, context=None):
            return _M_Demo.DUALSIO._op_subtract.invokeAsync(self, ((a, b), context))

        def begin_subtract(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.DUALSIO._op_subtract.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_subtract(self, _r):
            return _M_Demo.DUALSIO._op_subtract.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.DUALSIOPrx.ice_checkedCast(proxy, '::Demo::DUALSIO', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.DUALSIOPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::DUALSIO'
    _M_Demo._t_DUALSIOPrx = IcePy.defineProxy('::Demo::DUALSIO', DUALSIOPrx)

    _M_Demo.DUALSIOPrx = DUALSIOPrx
    del DUALSIOPrx

    _M_Demo.DUALSIO = Ice.createTempClass()
    class DUALSIO(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::DUALSIO', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::DUALSIO'

        @staticmethod
        def ice_staticId():
            return '::Demo::DUALSIO'

        def subtract(self, a, b, current=None):
            raise NotImplementedError("servant method 'subtract' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_DUALSIODisp)

        __repr__ = __str__

    _M_Demo._t_DUALSIODisp = IcePy.defineClass('::Demo::DUALSIO', DUALSIO, (), None, ())
    DUALSIO._ice_type = _M_Demo._t_DUALSIODisp

    DUALSIO._op_subtract = IcePy.Operation('subtract', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_long, False, 0), ())

    _M_Demo.DUALSIO = DUALSIO
    del DUALSIO

_M_Demo._t_URDIO = IcePy.defineValue('::Demo::URDIO', Ice.Value, -1, (), False, True, None, ())

if 'URDIOPrx' not in _M_Demo.__dict__:
    _M_Demo.URDIOPrx = Ice.createTempClass()
    class URDIOPrx(Ice.ObjectPrx):

        def updateDescription(self, description, context=None):
            return _M_Demo.URDIO._op_updateDescription.invoke(self, ((description, ), context))

        def updateDescriptionAsync(self, description, context=None):
            return _M_Demo.URDIO._op_updateDescription.invokeAsync(self, ((description, ), context))

        def begin_updateDescription(self, description, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.URDIO._op_updateDescription.begin(self, ((description, ), _response, _ex, _sent, context))

        def end_updateDescription(self, _r):
            return _M_Demo.URDIO._op_updateDescription.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.URDIOPrx.ice_checkedCast(proxy, '::Demo::URDIO', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.URDIOPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::URDIO'
    _M_Demo._t_URDIOPrx = IcePy.defineProxy('::Demo::URDIO', URDIOPrx)

    _M_Demo.URDIOPrx = URDIOPrx
    del URDIOPrx

    _M_Demo.URDIO = Ice.createTempClass()
    class URDIO(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::URDIO', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::URDIO'

        @staticmethod
        def ice_staticId():
            return '::Demo::URDIO'

        def updateDescription(self, description, current=None):
            raise NotImplementedError("servant method 'updateDescription' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_URDIODisp)

        __repr__ = __str__

    _M_Demo._t_URDIODisp = IcePy.defineClass('::Demo::URDIO', URDIO, (), None, ())
    URDIO._ice_type = _M_Demo._t_URDIODisp

    URDIO._op_updateDescription = IcePy.Operation('updateDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Demo.URDIO = URDIO
    del URDIO

# End of module Demo
